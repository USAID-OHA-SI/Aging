---
title: "Tracking Pediatric LTFU + Aging Out | Kenya"
author: "Aaron Chafetz, Baboyma Kagniniwa, Nelly Maina, and Lydia Odero"
date: "`r format(Sys.Date(), '%B %d, %Y') |> as.character()`"
format: docx
editor: source
---

## Background

Continuity on treatment (CoT) is vital for viral suppression of clients on treatment. CoT estimates among C/ALHIV are lower than adults. Aging-up may distort proxy CoT estimates. There is a need to take a deep-dive into the outcomes of CALHIV on treatment through individual level data to quantify the proportion accounted for by aging-up. The data used here come from the Kenya National Data Warehouse (NDW). Underlying code can be found on [GitHub](https://github.com/USAID-OHA-SI/Aging) and other inputs/outputs can be found on [Google Drive](https://drive.google.com/drive/folders/1NN5thuBKt7aW6k7rQO5YSoRDKemEMYMV)

## Setup

We'll be working with two files from NDW's relational database - (1) a master client list and (2) a client visits log. We'll need to munge the master client list and merge as well as append that onto the visits log.

Before we import the data, we first will want to load the packages we'll be using. Please note that `tidyverse` is `v2.0.0`, which now includes the `lubridate` package (used in this analysis).

```{r}
#| label: dependencies 
# library(tidylog, warn.conflicts = FALSE) #explicitly referenced for detailing filtering/merging results
library(tidyverse)
library(scales, warn.conflicts = FALSE)
library(lubridate, warn.conflicts = FALSE)
```

First we can import the master clients list...

```{r}
#| label: import_client
#| cache: true

#file_clientlist <- "Data/AgingOut_Feb162023.csv"
file_clientlist <- "Data/AgingOutClients.csv"

clientlist <- read_csv("Data/AgingOutClients.csv",
                       col_types = list(.default = "c",
                                        `ART Initiation Date` = "D"))

clientlist <- clientlist %>% 
      rename(im = `Implementing Partner`, 
             facility = `Facility Name`, 
             mfl_code = `Facility MFL Code`,
             county=`County of Treatment`,
             id=`Client Number(De-identified)`, 
             nupi=`NUPI(De-identified)`,
             sex=Sex, 
             orphan=Orphan, 
             residence=`County of Residence`,
             dob=DOB, 
             date_art_init=`ART Initiation Date`, 
             reg_art_init=`ART Regimen at Initiation`,
             line_art_init=`ART  Regimen Line at Initiation`, 
             reg_art_current=`Current ART Regimen`,
             line_art_current=`Current ART Regimen Line`)

glimpse(clientlist)

clientlist %>% 
  distinct(id, nupi) %>% 
  mutate(nupi = case_when(
    is.na(nupi) | nupi == 'NULL' ~ F,
    TRUE ~ T
  )) %>% 
  count(nupi) %>% 
  mutate(p = n / sum(n))

```

...and the visit data.

```{r}
#| label: import_visits
#| cache: true


#file_visits <- "Data/Appointments.csv"
file_visits <- "Data/AgingOutVisits.csv"

visits_data <- read_csv(file_visits, 
                        na = c("", "NA", "NULL"),
                        col_types = list(.default = "c"))

visits_data <- visits_data %>% 
  rename(im=`Implementing Partner`, 
         facility=`Facility Name`, 
         mfl_code=`Facility MFL Code`,
         id=`Client Number(De-identified)`, 
         nupi=`NUPI(De-identified)`, 
         appoint_date=`Appointment Date`, 
         visit_date=`Actual Visit Date`) 

glimpse(visits_data)

visits_data %>% 
  distinct(id, nupi) %>% 
  mutate(nupi = case_when(
    is.na(nupi) | nupi == 'NULL' ~ F,
    TRUE ~ T
  )) %>% 
  count(nupi) %>% 
  mutate(p = n / sum(n))

```

...and the exits data 

```{r}
#| label: import_exits
#| cache: true

file_exits <- "Data/AgingOut.Exits.csv"

exits_data <- read_csv(file_exits, 
                       na = c("", "NA", "NULL"),
                       col_types = list(.default = "c"))

exits_data <- exits_data %>% 
  rename(im=`Implementing Partner`, 
         id=`Client Number(De-identified)`,
         nupi=`NUPI(De-identified)`,
         facility=`Facility Name`, 
         mfl_code=`Facility MFL Code`, 
         exit_date=ExitDate, 
         exit_reason=ExitReason,
         exit_death_reason=ReasonForDeath,
         exit_death_spec_reason=specificDeathReason) 

glimpse(exits_data)

exits_data %>% 
  distinct(id, nupi) %>% 
  mutate(nupi = case_when(
    is.na(nupi) | nupi == 'NULL' ~ F,
    TRUE ~ T
  )) %>% 
  count(nupi) %>% 
  mutate(p = n / sum(n))

# Exit reasons - Consider only Dead/ TO/ Stopped/ LTFU - Convert other options to missing
exits_data %>% 
  distinct(exit_reason) %>% 
  arrange(exit_reason)

# Exit=death reasons
exits_data %>% 
  filter(str_detect(tolower(exit_reason), "dead|died")) %>% 
  distinct(exit_reason, exit_death_reason)

```

...and then the HIS data 

```{r}
#| label: import_his_list
#| cache: true

file_his <- "Data/AgingOut.HISList.csv"

his_data <- read_csv(file_his, 
                     na = c("", "NA", "NULL"),
                     col_types = list(.default = "c"))

his_data <- his_data %>% 
  rename(mfl_code=MFL_Code, 
         facility=`Facility_Name`, 
         county=County, 
         sub_county=SubCounty, 
         im=SDP,
         agency=SDP_Agency) 

glimpse(his_data)

# Check completeness of HIS reference data
all(clientlist$mfl_code %in% his_data$mfl_code)
all(his_data$mfl_code %in% clientlist$mfl_code)

```

For simplicity, we will truncate the number of characters in the id, making it easier to review, but still keeping it unique.

```{r}
#| label: ids

# CLIENTS

#capture the number of unique ids before truncating
  orig_unique <- length(unique(clientlist$id)) 
  orig_uunique <- clientlist %>% distinct(mfl_code, id) %>% nrow()
  orig_nupi <- length(unique(clientlist$nupi))
  
  percent(orig_nupi / orig_unique)
  percent(orig_nupi / orig_uunique)

#truncate id to the last 9 characters in the client list
  clientlist <- clientlist %>% 
    mutate(id = str_sub(id, -9),
           uid = paste0(mfl_code, "-", id),
           nupi = ifelse(nupi == 'NULL', NA_character_, str_sub(nupi, -9))) %>% 
    relocate(uid, .after = id)

#are the truncated ids still unique?
  length(unique(clientlist$id)) == orig_unique
  length(unique(clientlist$uid)) == orig_unique
  length(unique(clientlist$nupi)) == orig_nupi
  
  paste("There are", length(unique(clientlist$id)) %>% comma, "unique clients")
  paste("There are", length(unique(clientlist$uid)) %>% comma, "unique clients program wide")
  paste("There are", length(unique(clientlist$nupi)) %>% comma, "unique clients with national IDs")
  
#Track clients across facilities - id is not unique across program
  n_pos <- clientlist %>% 
    select(id, mfl_code) %>% 
    count(id, sort = T) %>% 
    filter(n > 1)
  
  paste("There are", nrow(n_pos) %>% comma, "clients that have visited 1+ facility of the course of the program")
  
  n_pos %>% 
    left_join(exits_data, by = "id") %>% 
    filter(is.na(exit_reason)) %>% 
    nrow() %>% 
    paste("Out of the ", nrow(n_pos) %>% comma, "clients with multiple site visits,", comma(.), "do not have an exit reason")
    
# VISITS
  
#truncate id to the last 9 characters in the visit
  visits_data <- visits_data %>% 
    mutate(id =  str_sub(id, -9),
           uid = paste0(mfl_code, "-", id),
           nupi = str_sub(nupi, -9)) %>% 
    relocate(uid, .after = id)
  
#are the truncated ids still unique?
  paste("There are", length(unique(visits_data$id)) %>% 
          comma, "unique clients with visits vs", 
        comma(orig_unique), "clients on file")
  
  paste("There could be", length(unique(visits_data$uid)) %>% 
          comma, "unique clients with visits vs", 
        comma(orig_uunique), "clients on file")
  
  paste("There are", length(unique(visits_data$nupi)) %>% 
          comma, "unique clients (w/ national IDs) with visits vs", 
        comma(orig_nupi), "clients on file")
  
# EXITS
  
#truncate id to the last 9 characters in the exits
  exits_data <- exits_data %>% 
    mutate(id =  str_sub(id, -9),
           uid = paste0(mfl_code, "-", id),
           nupi = str_sub(nupi, -9)) %>% 
    relocate(uid, .after = id)
  
# Recode exit reasons
  exits_data <- exits_data %>% 
    mutate(
      exit_reason = case_when(
        str_detect(str_to_lower(exit_reason), "dead|died") ~ "Died",
        str_detect(str_to_lower(exit_reason), "lost|ltfu") ~ "Lost to follow up",
        str_detect(str_to_lower(exit_reason), "stopped") ~ "Stopped and/or refused treatment",
        str_detect(str_to_lower(exit_reason), "transfer") ~ "Transferred out",
        TRUE ~ "Missing",
      )
    )
  
  exits_data %>% 
    count(exit_reason) %>% 
    mutate(p = n / sum(n)) %>% 
    arrange(desc(n))
  
#are the truncated ids still unique?
  paste("There are", length(unique(visits_data$id)) %>% 
          comma, " clients who exited for different reasons")
  
#Are all exits clients recorded in the client list?
  all(unique(exits_data$id) %in% unique(clientlist$id))
  all(unique(exits_data$uid) %in% unique(clientlist$uid))
  
#Do all exits clients recorded during visits?
  all(unique(exits_data$id) %in% unique(visits_data$id))
  all(unique(exits_data$uid) %in% unique(visits_data$uid))
  
#Who exiting with no visits / right after initiation?
  exits_data %>% 
    filter(!id %in% visits_data$id) %>% 
    count(im, exit_reason, sort = T) 
  
# HIS
  
# Check HIS for Multiple IMs at a single facility
  his_data %>% 
    count(agency, im) %>% 
    arrange(agency, desc(n))
  
  his_data %>% 
    count(mfl_code, facility, sort = T) 
  
```

## Munging: Master Client List

Of the four datasets, we'll start by munging the master client list, `clientlist`. Looking at the data, we adjust the class of `DOB`, date of birth,  which is a string data-time variable and we want to store it as just as just a date.

```{r}
#| label: clients_dob

  #convert dob to date
  clientlist <- clientlist %>% 
    mutate(dob = as_date(dob) %>% ymd)
  
  glimpse(clientlist)
  
```

Within the master client list there are `r unique(clientlist$id) |> length() |> comma()` unique clients (`id`) despite there being `r nrow(clientlist) |> comma()` records. The `r comma(nrow(clientlist) - unique(clientlist$id))` extra rows are a result of the client visiting multiple facilities over the course of their care (or a HIS deficiency in capturing unique clients at the national or program level). 
Since the meta client data may slightly vary (e.g. the birth date may be entered differently or the ART regimen line at initiation may not match), we need to just pick on of these rows of observation. We will use the visits dataset, `visits_data`, to identify the last visit for a given client and then use the information available at this facility to replace the rest of the client metadata.

```{r}
#| label: client_lastest

#Identify clients with multiple site visits - nupi id should help but it's incomplete
  clientlist %>% 
    summarise(n = n_distinct(mfl_code), .by = c(id, nupi)) %>% 
    filter(n > 1) %>% 
    arrange(desc(n))

#Pull out MFL Data
  mfl <- clientlist %>% 
    distinct(mfl_code, facility, county) %>% 
    arrange(county, facility)
  
#Pull out IM data
  mechs <- clientlist %>% 
    distinct(mfl_code, im) %>% 
    arrange(im)

#identify the latest visit/current facility for a client
  curr_facility <- visits_data %>%
    mutate(visit_date = dmy(visit_date)) %>% 
    filter(visit_date == max(visit_date), .by = id) %>% 
    distinct(id, mfl_code) %>% 
    mutate(current_facility = TRUE)

#ensure full list of ids after filtering
  length(unique(visits_data$id)) == length(unique(curr_facility$id))
  all(unique(visits_data$id) %in% unique(curr_facility$id))

#limit dataset to only key variables and join w/ current facility list
clientlist <- clientlist %>%
  #select(id, mfl_code, sex, dob, facility, county, date_art_init, reg_art_current) %>% 
  select(id, mfl_code, sex, dob, date_art_init, reg_art_current) %>% 
  mutate(n = n(), .by = id) %>% 
  tidylog::left_join(curr_facility, by = c("id", "mfl_code"))

#retain meta data info at earlier facilities and replace with current
#Note: sex, dob, date_art_init, reg_art_current are based on info from latest facility visited.
clientlist <- clientlist %>%
  mutate(current_facility = ifelse(is.na(current_facility), FALSE, current_facility),
         across(c(sex, dob, date_art_init, reg_art_current), 
                \(x) case_when(current_facility | n == 1 ~ x))) %>% 
  group_by(id) %>% 
  fill(c(sex, dob, date_art_init, reg_art_current), .direction = "updown") %>% 
  ungroup() %>% 
  select(-c(n, current_facility))
```

```{r}
#| label: client_fac_dups
#| echo: false

# Note: Client #0DF268468 has 2 records with different dob, sex, and date_art_init
multi_vals <- clientlist %>% 
  filter(n() > 1, .by = c(id, mfl_code)) %>% # Get first row for same dob, sex, and date_art_init 
  arrange(id, mfl_code)

multi_clients <- multi_vals %>% 
  distinct(id) %>% 
  nrow()
```

If we review this client dataset, we notice that there are `r nrow(multi_vals) ` cases in which the same `r multi_clients` clients have  two or more different records within the same site with different metadata. To resolve this discrepancy, we will take the first observation.

```{r}
#| label: clients_remove

clientlist <- clientlist %>% 
  group_by(id, mfl_code) %>% 
  tidylog::filter(row_number() == 1) %>% 
  ungroup()
           
```

Another data issue we noticed is that `r filter(clientlist, dob > date_art_init) %>% nrow()` clients had ART initiation dates (`date_art_init`) before they were born (`dob`). We will exclude those clients from our master list.

```{r}
#| label: clients_wrong_init

# Note: we might be excluding valid records due to poor data entry / validations
clientlist <- clientlist %>% 
  tidylog::filter(dob <= date_art_init)

```

Lastly, for this analysis, we want to know when clients age out of the pediatric program (after they turn 15 years old). We need to create this variable based on the client's birthday (`dob`).

```{r}
#| label: clients_ageout

master_clientlist <- clientlist %>% 
  mutate(date_age_out = dob %m+% years(15))

glimpse(master_clientlist)
```
So at the end of the day, we have `r unique(master_clientlist$id) %>% length() %>%  comma()` unique clients and `r nrow(master_clientlist) %>%  comma()` unique client x facility pairs.

```{r}
#| label: clients_export
#| echo: false

write_csv(master_clientlist, "Dataout/master_clientlist.csv", na = "")
```

Before moving to the next step, we can quickly explore how many pediatric clients have been aging out (`date_age_out`) versus newly entering (`date_art_init`) each year for the past few years (excluding FY23 since we only have one quarter of data). This review is simply exploratory using the client master list data, and doesn't include LTFU.

```{r}
#| label: clients_explore
#| echo: false

master_clientlist %>% 
  left_join(
    exits_data[exits_data$exit_reason != "Missing", c('id', 'mfl_code', 'exit_date', 'exit_reason')], 
    by = c('id', 'mfl_code')
  ) %>%
  mutate(
    exit_date = ymd(exit_date),
    # Dead/LTFU/Stopped patients should not age out - Flag them as exit
    date_age_out = case_when(
      exit_reason != "Transferred out" & ymd(exit_date) < ymd(date_age_out) ~ NA_Date_, 
      TRUE ~ date_age_out
    ),
    # Aging out should not precede exits?
    exit_date = case_when(
      exit_reason == "Transferred out" ~ NA_Date_,
      ymd(date_age_out) <= ymd(exit_date) ~ NA_Date_,
      TRUE ~ exit_date
    )
  ) %>% 
  filter(row_number() == 1, .by = id) %>%
  mutate(across(c(date_art_init, date_age_out, exit_date), 
                \(d) d %>% 
                  quarter(with_year = TRUE, fiscal_start = 10) %>%
                  str_replace("20", "FY") %>% 
                  str_sub(end = 4),
                .names = "{col}_fy")
         ) %>% 
  mutate(new = date_art_init_fy, # `curr` or `new` ?
         agedout = date_age_out_fy,
         exit = exit_date_fy) %>% 
  select(new, agedout, exit) %>% 
  pivot_longer(cols = everything(),
               names_to = "type",
               values_to = "fiscal_year",
               values_drop_na = TRUE) %>% 
  filter(!is.na(fiscal_year)) %>% 
  count(type, fiscal_year, name = "value") %>% 
  pivot_wider(names_from = type, values_from = value) %>% 
  filter(
    fiscal_year %in% paste0("FY", 19:22)
    #!is.na(new) & !is.na(agedout)
  )

```

## Munging: Visit Log

We have the relational master client list and now it's time to munge the visit log. We need to truncate the `id` like we did in the master client list so we can relate these two tables later on.

```{r}
#| label: visits_clean
    
  #clean up date
    visits_data <- visits_data %>% 
      mutate(across(c(visit_date, appoint_date), \(x) dmy(x)))
    
  #reorder columns for ease of review
    visits_data <- visits_data %>% 
      relocate(id, nupi, mfl_code, facility, .before = 1) %>% 
      relocate(visit_date, .before = appoint_date)
    
  glimpse(visits_data)
```

```{r}
#| label: visits_todrop
#| echo: false

# Drop all visit records not in clientlist
ndrop <- visits_data %>% 
  #anti_join(master_clientlist, by = c("id", "facility", "mfl_code")) %>% 
  anti_join(master_clientlist, by = c("id", "mfl_code")) %>% 
  nrow() %>% 
  comma()
```

We want to restrict the dataset to only clients who appear in the master client list (and merge the client meta data onto the visit list), which means dropping `r ndrop` records that exist in the `visits_data` but not `master_clientlist`, i.e. clients have aged out.

```{r}
#| label: visits_semijoin

# Keep only visit records in clientlist - 
visits_data <- visits_data %>% 
  tidylog::semi_join(master_clientlist,
                     #by = c("id", "facility", "mfl_code")
                     by = c("id", "mfl_code")
                     )

```


```{r}
#| label: visits_date_missing
#| echo: false

visits_data %>% 
  filter(is.na(visit_date)) %>% 
  nrow() %>% 
  comma() %>% 
  paste("# of records with no visit date =", .)

visits_data %>% 
  filter(is.na(appoint_date)) %>% 
  nrow() %>% 
  comma() %>% 
  paste("# of records with no appointment date =", .)

df_appt_placeholder <- visits_data %>% 
  filter(appoint_date == "1900-01-01") 

df_appt_past <- visits_data %>% 
  filter(appoint_date <= visit_date)

v_appt_null <- visits_data %>% 
  filter(is.na(appoint_date)) %>% 
  nrow() %>% 
  comma()
```

If you review the data, you'll find some problems with appointment dates. One example is we can see appointments stored as `1900-01-01` possibly a way of coding missing data. There are `r nrow(df_appt_placeholder) |> comma()` records with this placeholder date (across `r unique(df_appt_placeholder$id) |> length() |> comma()` clients). We can also see a data entry problem with appointments if we look at the date compared with the visit date. The appointment dates should be in the future to identify the next visit date. There are, however, `r nrow(df_appt_past) |> comma()` observations for `r unique(df_appt_past$id) |> length() |> comma()` clients, where the appointment predates the visit. Additionally, `r v_appt_null` records have no appointment data. For those clients with invalid or missing appointment dates, we have decided to drop these observations.

```{r}
#| label:  visits_problems

#remove any visits that don't have a future appointment or an invalid date
 visits_data <-  visits_data %>%  
      tidylog::filter(!is.na(appoint_date), 
                      appoint_date > visit_date,
                      appoint_date != "1900-01-01")
```

There are also a number of duplicative records, which we will want to remove.

```{r}
#| label: visit_dups

clean_visits_data <- tidylog::distinct(visits_data) 

```

Before moving forward, we want to store the bounds of the visit date data in the dataset so we can filter out prior/future dates for LTFU and aging out.

```{r}
#| label:  visits_bounds
  min_visit <- min(clean_visits_data$visit_date, na.rm = TRUE)
  # Country team requested this be move to end of CY22
  max_visit <- max(clean_visits_data$visit_date, na.rm = TRUE)
```
The visit observations occur between `r min_visit` and `r max_visit`.

## Join Master Client List to Visit Log

Now that we have clean data from both the client list and the visit log, we want to join these two relational tables (based on `id` and `facility`). Combining these data allow us to do two things further on: first to allow us to exclude any observations **after the client is 15 years old**; and second, to include the ART initiation date to capture "TX_NEW".

```{r}
#| label: join

  #merge on age data (for filtering)
    merged_visits_data <- clean_visits_data %>% 
      tidylog::left_join(master_clientlist,
                         #by = c("id", "facility", "mfl_code")
                         by = c("id", "mfl_code")
                         )
    
  #relocate patient data closer to id
    merged_visits_data <- merged_visits_data %>% 
      relocate(sex:date_age_out, .after = id)
    
    glimpse(merged_visits_data)

```

## Calculate Status

For the analysis, we need to have distinct rows for each date a status occurs. The next few sections will walk through the calculations for each status type.

### Status - Active

In order to calculate a client's status (active or lost to follow up, LTFU), we would ideally have the ART dispensing data to know how long before the client needs to return for more treatment. Without these data, we can create a proxy by using the length between visits, assuming their Rx is for this duration.

Let's start by including the next actual visit date onto the same line as the current visit.

```{r}
#| label: act_next

  #add in the next actual visit date for calculating duration between appointments
    merged_visits_data <- merged_visits_data %>% 
      arrange(id, visit_date) %>% 
      mutate(next_visit_date = lead(visit_date, order_by = visit_date), .by = id)

  glimpse(merged_visits_data)

```

We will want to remove any instances in the data where new initiations are occurring after a patient has been to one or more visits. We will filter out any visits that occur before the `data_art_init`.

```{r}
#| label: act_init_lim

# Note: Are we filtering out the records or the patient entirely?
patients_w_visits_errors <- merged_visits_data %>% 
  tidylog::filter(visit_date < date_art_init) %>% 
  select(id, mfl_code, dob, date_age_out, date_art_init, visit_date, next_visit_date) %>% 
  arrange(id)

merged_visits_data <- merged_visits_data %>% 
  tidylog::filter(visit_date >= date_art_init)

any(patients_w_visits_errors %in% unique(merged_visits_data$id))
```

Next, we can calculate the duration between actual visits. Based on PEPFAR's guidance, a patient would only be counted as lost to follow up, 28 days after the planned gap (after missing their scheduled appointment).

```{r}
#| label: act_duration

  # Days allowed
  #dlen <- 28
  dlen <- 30

  #calculation duration between visits (proxy = 28 days after planned appt gap)
    merged_visits_data <- merged_visits_data %>% 
      mutate(visit_gap_planned = appoint_date - visit_date,
             visit_gap_allowed = appoint_date + days(dlen) - visit_date,
             visit_gap_actual = next_visit_date - visit_date) 

  glimpse(merged_visits_data)
```

Since this analysis is retrospective, in addition to knowing if a client is lost, we know whether the client has returned to treatment. We can calculate the following based on their visit gaps and if they have a future appointment.

**IIT (Previously set as LTFU) Logic**: Count a client as LTFU if (a) there is no future visit date (`next_visit_date`); or (b) the duration between visits  (`visit_gap_actual`) exceeds the allowable visit gap (`visit_gap_allowed`); and (c) not if the client scheduled to return after we have actual visit data for in the dataset (`max_visit`)

**IIT/RTT Logic**: Count a client as interrupted and returned to treatment (RTT) if (a) they were originally LTFU; and (b) they have an actual next visit date (`next_visit_date`)

**Aged Out Logic**: Count a client if the visit is after they turn 15 years old (`date_age_out`)

```{r}
#| label: act_status

  #ltfu (vs rtt) status
    merged_visits_data <- merged_visits_data %>% 
      mutate(iit = case_when(appoint_date + days(dlen) > max_visit ~ FALSE, #C 
                              is.na(next_visit_date) ~ TRUE, #A
                              visit_gap_actual > visit_gap_allowed ~ TRUE, #B 
                              TRUE ~ FALSE),
             rtt = case_when(iit == TRUE & is.na(next_visit_date) ~ FALSE, # A+B
                             iit == TRUE ~ TRUE,
                             TRUE ~ FALSE),
             agedout = visit_date > date_age_out)

  glimpse(merged_visits_data)

```
For this active pediatric client list, we want to remove any record after the client has turned 15 years old.

```{r}
#| label: act_age_lim

merged_visits_data <- merged_visits_data %>% 
  tidylog::filter(agedout == FALSE)
```

At this stage, we can now count all the patients as "Active" in the dataset. The patients will only become LTFU in the future after the `visit_gap_allowed` and will need to be added in as a separate row later in the analysis.

```{r}
#| label: act_df

  #create type for adding in different datasets
    merged_visits_data <- merged_visits_data %>% 
      mutate(status = "Active",
             date = visit_date)

  glimpse(merged_visits_data)
```

### Status - Aged Out

An important part of this analysis is tracking patients until they age out, i.e. are older than 15 years old. We will create a dataset (unique rows) to identify the date at which a client ages out. We'll filter down the master client list first to (A) make sure we don't add age out dates after the observable period in the dataset; (B) only if the client also exists in the visits log so we don't add clients who don't have visit data; and (C) we want to ensure we only have one observation per client (in the event they have multiple records due to visiting different facilities).

```{r}
#| label: ageout_df

  #add ageout date as a distinct record/row
    date_ageout <- master_clientlist %>% 
      filter(between(date_age_out, min_visit, max_visit)) %>% #A
      filter(id %in% unique(merged_visits_data$id)) %>% #B
      filter(row_number() == 1, .by = id) %>% #C
      mutate(date = date_age_out,
             status = "Aged Out") 

glimpse(date_ageout)

```

### Status - LTFU

In the earlier section, we calculated when patients were active versus LTFU/ITT, but we need to actually append on distinct observations of when that occurs.

```{r}
#| label: ltfu_df
 
  #add in LTFU date as row (will be future period ahead of last visit)
    # date_ltfu <- merged_visits_data %>%
    #   filter(ltfu == TRUE) %>%
    #   mutate(date = visit_date + visit_gap_allowed + days(1),
    #          status = ifelse(rtt == FALSE, "LTFU", "IIT")) %>%
    #   select(-visit_date:-visit_gap_actual) %>% 
    #   filter(between(date, min_visit, max_visit),
    #          date < date_age_out)

  date_iit <- merged_visits_data %>%
      filter(iit == TRUE) %>%
      mutate(date = visit_date + visit_gap_allowed + days(1),
             status = "IIT") %>%
      select(-visit_date:-visit_gap_actual) %>% 
      filter(between(date, min_visit, max_visit),
             date < date_age_out)

  glimpse(date_iit)
```

### Status - New

From the master client list, we can use the ART initiation date (`date_art_init`) to approximate TX_NEW as per PEPFAR MER guidance.

It's important to note a few things: (a) The initiations are separate from a separate source than the visit data; (b) if a client is initiated, they should also have a active status (i.e. have visits data), though this isn't always true in the data; (c) active status **should** be inclusive of new initiations (similar to MER where TX_CURR includes TX_NEW); (d) some patients in data had initiation dates after one or many visits and these were removed in an earlier step; and (e) when a patient move to various clinics, their initiation date is repleted so we need to only keep on observation of the initiation date.

```{r}
#| label: new_df

#include new initiation (between bounds of visit dataset and excluded 15+)
status_new <- master_clientlist %>% 
  mutate(period = date_art_init %>% 
           quarter(with_year = TRUE, fiscal_start = 10) %>%
           str_replace("20", "FY") %>% 
           str_replace("\\.", "Q"),
         fiscal_year = period %>% 
           str_sub(3,4) %>% 
           paste0(20, .) %>% 
           as.integer(),
         status = "New",
         date = date_art_init) %>%
  tidylog::filter(date_age_out > date_art_init) %>% 
  tidylog::filter(id %in% merged_visits_data$id) %>% 
  tidylog::filter(between(date_art_init, min_visit, max_visit)) %>% 
  group_by(id) %>% 
  tidylog::filter(row_number() == 1) %>% 
  ungroup()

  glimpse(status_new)

```

## Appended Status Data

We now have three separate datasets by status that need to be combined back together: Active, Aged Out, and LTFU/IIT. Once we bind these together, we need to remove any patients who didn't have any data in the visits log, but were created by binding on the age out date.

```{r}
#| label: appended_df

  #bind date of ltfu date + age out date back onto dataset
    appended_visits_data <- merged_visits_data %>% 
      #bind_rows(date_ltfu, date_ageout) %>% 
      bind_rows(date_iit, date_ageout) %>% 
      arrange(id, date)
  
  #remove patients where only observation is aging out (should have already been removed)
    appended_visits_data <- appended_visits_data %>% 
      group_by(id) %>% 
      tidylog::filter(!(status == "Aged Out" & n() == 1)) %>% 
      ungroup()
    
  #remove age out observation when the patient is already LTFU
    appended_visits_data <- appended_visits_data %>% 
      group_by(id) %>% 
      #tidylog::filter(!(status == "Aged Out" & lag(status) == "LTFU")) %>%
      tidylog::filter(!(status == "Aged Out" & lag(status) == "IIT")) %>%
      ungroup()
   
```

### Quarter Status

At this point, we have combined all the status data together except for new initiations (which are additive). We want to convert these calendar dates into status by fiscal quarter to approximate PEPFAR data, so we need to take the status of the last observation for each fiscal quarter or year. First up, we need to apply the periods and fiscal year based on the status date and then arrange the status types so that Active comes after LTFU (in the event they both occur on the same day).

```{r}
#| label: status_cleaning

#apply fiscal quarter
    appended_visits_data <- appended_visits_data %>% 
      mutate(period = date %>% 
               quarter(with_year = TRUE, fiscal_start = 10) %>%
               str_replace("20", "FY") %>% 
               str_replace("\\.", "Q"),
             fiscal_year = period %>% 
               str_sub(3,4) %>% 
               paste0(20, .) %>% 
               as.integer())
    
  #arrange by status (Active to come after LTFU in event they occur on the same day)
    status_data <- appended_visits_data %>% 
      mutate(
        #status = factor(status, c("LTFU", "IIT", "Active", "Aged Out"))
        status = factor(status, c("IIT", "Active", "Aged Out"))
        ) %>% 
      arrange(id, date, status)
    
    glimpse(status_data)
```

With the fiscal periods included, we can now

```{r}
#| label: status_qtr

  #filter by the last observed status per period to capture the status
    status_data_qtr <- status_data %>% 
      filter(row_number() == max(row_number()), 
             .by = c(id, period))

  #bind on new initiations
    status_data_qtr <- status_data_qtr %>% 
      mutate(status = as.character(status)) %>% 
      bind_rows(status_new) %>%
      arrange(id, date)
    
    glimpse(status_data_qtr)
```

### Fiscal Year Status

We can repeat this as well to calculate each client's status at the end of the fiscal year.

```{r}
#| label: status_fy

    #filter by the last observed status per period to capture the status
    status_data_fy <- status_data %>% 
      filter(row_number() == max(row_number()),
             .by = c(id, fiscal_year))
    
    #bind on new initiations
    status_data_fy <- status_data_fy %>% 
      mutate(status = as.character(status)) %>% 
      bind_rows(status_new) %>%
      arrange(id, date)
    
    glimpse(status_data_fy)
```

### Aggregate Tables

```{r}
#| label: status_tables

  #agg table of status by quarter (period)
  status_data_qtr %>% 
    count(fiscal_year, period, status) %>% 
    pivot_wider(names_from = status,
                values_from = n) %>% 
    relocate(New, Active, IIT, .after = 2)


  #agg table of status by fiscal_year 
    status_data_fy %>% 
      count(fiscal_year, status) %>% 
      pivot_wider(names_from = status,
                  values_from = n) %>% 
      #relocate(New, Active, IIT, LTFU, .after = 2)
      relocate(New, Active, IIT, .after = 2)
```

```{r}
#| label: visits_export
#| echo: false
#| include: false
#| eval: false

  #export
    write_csv(appended_visits_data, "Dataout/aging_patient-status_date.csv", na = "")
    zip("Dataout/aging_patient-status_date.zip",
        "Dataout/aging_patient-status_date.csv", extras = "-j")
    unlink("Dataout/aging_patient-status_date.csv")
    
    write_csv(status_data_qtr, "Dataout/aging_patient-status_qtr.csv", na = "")
    zip("Dataout/aging_patient-status_qtr.zip",
        "Dataout/aging_patient-status_qtr.csv", extras = "-j")
    unlink("Dataout/aging_patient-status_qtr.csv")
    
    write_csv(status_data_fy, "Dataout/aging_patient-status_fy.csv", na = "")
    zip("Dataout/aging_patient-status_fy.zip",
        "Dataout/aging_patient-status_fy.csv", extras = "-j")
    unlink("Dataout/aging_patient-status_fy.csv")
  

```

## Munging: Viz

One of the outputs of this analysis is to understand how clients are tracking each year. To best capture the ever changing nature of the client list, we can use a Sankey Diagram to visualize each year's changing enrollment data.

We'll need to start with the fiscal year status data (`status_data_fy`) and aggregate it if there are more than one row (this occurs due to appending on new initiations). We reorder "New" to the end so it is always last in the collapsed text for our string parsing later on.

```{r}
#| label: viz_agg

  viz_collapsed <- status_data_fy %>% 
    mutate(status = fct_relevel(status, "New", after = Inf)) %>% 
    arrange(id, fiscal_year, status) %>% 
    mutate(status = as.character(status)) %>%
    summarise(status = paste0(status, collapse = " - "),
              .by = c(id, fiscal_year))

  glimpse(viz_collapsed)
```

To make sure each patients exists each year and then pull the status forward of the prior year. To ensure no data are lost, we will create a full panel of years for each patient, flagging any years where there is filled values (`added`) and only keeping data between actual observed reported (using `min_fy` and `max_fy`). 

```{r}
#| label: viz_next

#identify the min and max reporting year for each client (so we can remove extra values created in complete)
viz_collapsed <- viz_collapsed %>% 
  mutate(min_fy = min(fiscal_year),
         max_fy = max(fiscal_year),
         .by = id)

#expand each patient row to have every year 
viz_collapsed <- viz_collapsed %>% 
  complete(fiscal_year, nesting(id)) %>% 
  arrange(id, fiscal_year) %>% 
  mutate(added = case_when(is.na(status) ~ TRUE))

#fill missing years with status (should just be IIT)
viz_collapsed <- viz_collapsed %>% 
  group_by(id) %>% 
  #fill(ends_with("fy"), .direction = "downup") %>% 
  fill(status, .direction = "down") %>% 
  mutate(status = case_when(between(fiscal_year, min_fy, max_fy) ~ status)) %>% 
  ungroup() #%>% 
  #select(-ends_with("fy"))

glimpse(viz_collapsed)
```

Since the "New" status was appended on and collapsed into the year's status, we want to make sure this doesn't get filled down since a patient should only be new once. We do have a number of instances where a patient is newly initiated based on the master client list, but has no visits during the fiscal year he is initiated. If a client is new in a given year, we will add the "New" status to the prior year (`status_prior_yr`) for the visual to see it as an entry point.

```{r}
#| label: viz_new
#remove "New" from filled values (only want a patient to be new once)
viz_collapsed <- viz_collapsed %>% 
  mutate(status = case_when(added == TRUE & status == "New" ~ NA_character_,
                            added == TRUE ~ str_remove(status, " - New"),
                            TRUE ~ status)) %>%
  select(-added)

#create a value for the end of the year, status excluding New (captured in prior)
viz_collapsed <- viz_collapsed %>% 
  mutate(status_end_yr = status %>% 
           str_remove(" - New") %>% 
           na_if("New")) 

#pull the prior year's status (or New)
viz_collapsed <- viz_collapsed %>% 
  mutate(status_prior_yr = ifelse(str_detect(status, "New"), "New",
    lag(status_end_yr, n = 1, order_by = fiscal_year)), .by = id)
  
  glimpse(viz_collapsed)
```

Lastly, we want to aggregate the status categories by year and order them way they should appear in the visualization (we will remove the numbers in post processing).

```{r}
#| label: viz_out

  #aggregate up by status groups for plot (and number for plot layout ordering)
  viz_out <- viz_collapsed %>% 
    filter(!is.na(status)) %>% 
    count(fiscal_year, status_prior_yr, status_end_yr, name = "patients", sort = TRUE) %>% 
    mutate(status_prior_yr = case_match(status_prior_yr,
                                        "New" ~ "1. New",
                                        "IIT" ~ "2. RTT",
                                        "Active" ~ "4. Active",
                                        # .default = status_prior_yr), #check that no missing categories
                                        .default = "3. Unclassified"),
           status_end_yr = case_match(status_end_yr,
                                        "Active" ~ "1. Active",
                                        "IIT" ~ "2. IIT",
                                        #"LTFU" ~ "3. LTFU",
                                        "Aged Out" ~ "3. Aged Out",
                                        # .default = status_end_yr) #check that no missing categories
                                        .default = "4. Unclassified")
    ) 

glimpse(viz_out)

```

Now the data are ready to be exported for us in aggregate level Sankey flow diagrams.

```{r}
#| label: viz_export
#| eval: false

  walk(2020:2022,
       ~ viz_out %>% 
         filter(fiscal_year == .x) %>% 
         write_csv(paste0("Dataout/aging-viz_fy", .x, ".csv"), na = "")
  ) 

```

From here, the data can be used in [RawGraphs](https://www.rawgraphs.io/) to create a Sankey plot. In RawGraphs, 1. load data (not saved by site) 2. Choose a chart: Alluvial Diagram 3. Mapping: Steps = status_start_year, status_end_year; Size = patients 4. Customize: width = 1280 height = 770 margin (top) = 75 margin (right) = 100 margin (bottom) = 45 margin (left) = 100 padding = 20 Links opacity = .8 Flows alignment = top 5. Export: svg and cleaned up in Adobe Illustrator (this can also be done in PowerPoint)

```{r}
#| label: uploads
#| eval: false
#| echo: false

#doc upload
googledrive::drive_upload("aging.docx",
             path = googledrive::as_id("14feQ6uBn8VxQT31mQmzPYgmTJqUCthbd"),
             name = "Aging Up Code Review and Writeup",
             type = "document",
             overwrite = TRUE)

#upload data outputs
list.files("Dataout", full.names = TRUE) |>
  purrr::walk(~googledrive::drive_upload(.x,
                     path = googledrive::as_id("1WPkwtd2BUpfAURm0QnriPUMCQOymLDJe"),
                     overwrite = TRUE))
       
```

